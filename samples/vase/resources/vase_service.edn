{:activated-apis [:sample.vase/v1]
 :datomic-uri    "datomic:mem://example"
 :descriptor
 {:vase/norms
  {:vase/user-schema
   {:vase.norm/txes [#vase/schema-tx [[:user/userId    :one :long   :identity "A User's unique identifier"]
                                      [:user/userEmail :one :string :unique   "The user's email"]
                                      [:user/userBio   :one :string :fulltext "A short blurb about the user"]
                                      [:user/company   :one :ref              "The user's employer"]]]}}

  ;; API Tagged Chunks/Versions
  ;; --------------------------
  :vase/apis
  {:sample.vase/v1
   {:vase.api/routes
    {"/users"     {:get  [#vase/query{:params []
                                      :query  [:find ?id ?email
                                               :where
                                               [?e :user/userId ?id]
                                               [?e :user/userEmail ?email]]}
                          #vase/conform{:from :com.cognitect.vase.actions/query-data
                                        :spec (clojure.spec/* (clojure.spec/spec (clojure.spec/cat :userid integer? :email string?)))
                                        :to   :users}
                          #views/render{:name :sample.vase.v1/users-page
                                        :view :users
                                        :from :users}]}

     "/users/:id" {:get  #vase/query{:name       :sample.vase.v1/user-id-page
                                     :params     [id]
                                     :edn-coerce [id]
                                     :query      [:find ?e
                                                  :in $ ?id
                                                  :where
                                                  [?e :user/userId ?id]]}}

     "/user"      {:get  #vase/query{:name   :sample.vase.v1/user-page
                                     :params [email]
                                     :query  [:find ?e
                                              :in $ ?email
                                              :where
                                              [?e :user/userEmail ?email]]}
                   :post #vase/transact{:name       :sample.vase.v1/user-create
                                        :properties [:db/id
                                                     :user/userId
                                                     :user/userEmail
                                                     :user/userBio]}}}

    ;; Add a #views/engine here. Should be one of the following:
    ;;
    ;; Use the default engine. View keys map to functions
    ;; #views/engine{}

    ;; Use Selmer. View keys map to ".html" files in "resources"
    ;; #views/engine{:engine-type :selmer}

    ;; Use Stencil. View keys map to ".mustache" files in "resources"
    :vase.api/interceptors    [com.cognitect.pedestal.views.stencil/renderer]

    ;; This sample project has Stencil in its dependencies, so
    ;; Pedestal.views can use it. Pedestal.views does _not_
    ;; automatically pull in Stencil or Selmer as transitive dependencies.

    :vase.api/schemas         [:sample.vase/user-schema]}}}}
